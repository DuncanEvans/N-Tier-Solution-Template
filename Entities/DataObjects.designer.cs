#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TDQDB")]
	public partial class DataObjectsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertdishe(dishe instance);
    partial void Updatedishe(dishe instance);
    partial void Deletedishe(dishe instance);
    partial void Insertside(side instance);
    partial void Updateside(side instance);
    partial void Deleteside(side instance);
    partial void Insertdishes_has_side(dishes_has_side instance);
    partial void Updatedishes_has_side(dishes_has_side instance);
    partial void Deletedishes_has_side(dishes_has_side instance);
    partial void Insertdrink(drink instance);
    partial void Updatedrink(drink instance);
    partial void Deletedrink(drink instance);
    #endregion
		
		public DataObjectsDataContext() : 
				base(global::Entities.Properties.Settings.Default.TDQDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataObjectsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataObjectsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataObjectsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataObjectsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<dishe> dishes
		{
			get
			{
				return this.GetTable<dishe>();
			}
		}
		
		public System.Data.Linq.Table<side> sides
		{
			get
			{
				return this.GetTable<side>();
			}
		}
		
		public System.Data.Linq.Table<dishes_has_side> dishes_has_sides
		{
			get
			{
				return this.GetTable<dishes_has_side>();
			}
		}
		
		public System.Data.Linq.Table<drink> drinks
		{
			get
			{
				return this.GetTable<drink>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dishes")]
	public partial class dishe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<dishes_has_side> _dishes_has_sides;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public dishe()
		{
			this._dishes_has_sides = new EntitySet<dishes_has_side>(new Action<dishes_has_side>(this.attach_dishes_has_sides), new Action<dishes_has_side>(this.detach_dishes_has_sides));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(45)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dishe_dishes_has_side", Storage="_dishes_has_sides", ThisKey="id", OtherKey="dishes_id")]
		public EntitySet<dishes_has_side> dishes_has_sides
		{
			get
			{
				return this._dishes_has_sides;
			}
			set
			{
				this._dishes_has_sides.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dishes_has_sides(dishes_has_side entity)
		{
			this.SendPropertyChanging();
			entity.dishe = this;
		}
		
		private void detach_dishes_has_sides(dishes_has_side entity)
		{
			this.SendPropertyChanging();
			entity.dishe = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sides")]
	public partial class side : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<dishes_has_side> _dishes_has_sides;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public side()
		{
			this._dishes_has_sides = new EntitySet<dishes_has_side>(new Action<dishes_has_side>(this.attach_dishes_has_sides), new Action<dishes_has_side>(this.detach_dishes_has_sides));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(45)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="side_dishes_has_side", Storage="_dishes_has_sides", ThisKey="id", OtherKey="sides_id")]
		public EntitySet<dishes_has_side> dishes_has_sides
		{
			get
			{
				return this._dishes_has_sides;
			}
			set
			{
				this._dishes_has_sides.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dishes_has_sides(dishes_has_side entity)
		{
			this.SendPropertyChanging();
			entity.side = this;
		}
		
		private void detach_dishes_has_sides(dishes_has_side entity)
		{
			this.SendPropertyChanging();
			entity.side = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dishes_has_sides")]
	public partial class dishes_has_side : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _dishes_id;
		
		private int _sides_id;
		
		private EntityRef<dishe> _dishe;
		
		private EntityRef<side> _side;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ondishes_idChanging(int value);
    partial void Ondishes_idChanged();
    partial void Onsides_idChanging(int value);
    partial void Onsides_idChanged();
    #endregion
		
		public dishes_has_side()
		{
			this._dishe = default(EntityRef<dishe>);
			this._side = default(EntityRef<side>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dishes_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int dishes_id
		{
			get
			{
				return this._dishes_id;
			}
			set
			{
				if ((this._dishes_id != value))
				{
					if (this._dishe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondishes_idChanging(value);
					this.SendPropertyChanging();
					this._dishes_id = value;
					this.SendPropertyChanged("dishes_id");
					this.Ondishes_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sides_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int sides_id
		{
			get
			{
				return this._sides_id;
			}
			set
			{
				if ((this._sides_id != value))
				{
					if (this._side.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsides_idChanging(value);
					this.SendPropertyChanging();
					this._sides_id = value;
					this.SendPropertyChanged("sides_id");
					this.Onsides_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dishe_dishes_has_side", Storage="_dishe", ThisKey="dishes_id", OtherKey="id", IsForeignKey=true)]
		public dishe dishe
		{
			get
			{
				return this._dishe.Entity;
			}
			set
			{
				dishe previousValue = this._dishe.Entity;
				if (((previousValue != value) 
							|| (this._dishe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dishe.Entity = null;
						previousValue.dishes_has_sides.Remove(this);
					}
					this._dishe.Entity = value;
					if ((value != null))
					{
						value.dishes_has_sides.Add(this);
						this._dishes_id = value.id;
					}
					else
					{
						this._dishes_id = default(int);
					}
					this.SendPropertyChanged("dishe");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="side_dishes_has_side", Storage="_side", ThisKey="sides_id", OtherKey="id", IsForeignKey=true)]
		public side side
		{
			get
			{
				return this._side.Entity;
			}
			set
			{
				side previousValue = this._side.Entity;
				if (((previousValue != value) 
							|| (this._side.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._side.Entity = null;
						previousValue.dishes_has_sides.Remove(this);
					}
					this._side.Entity = value;
					if ((value != null))
					{
						value.dishes_has_sides.Add(this);
						this._sides_id = value.id;
					}
					else
					{
						this._sides_id = default(int);
					}
					this.SendPropertyChanged("side");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.drinks")]
	public partial class drink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public drink()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(45)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
